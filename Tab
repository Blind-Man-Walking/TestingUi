--- Creates a new tab and its corresponding content page.
function BlindHubsUiLibrary:AddTab(tabName)
    if self.activeTab then
        local oldTabBaseColor = self.activeTab:GetAttribute("BaseColor")
        if oldTabBaseColor then
            if self:GetThemeName() == "Black" then
                self.activeTab.BackgroundColor3 = oldTabBaseColor
            else
                self.activeTab.BackgroundColor3 = oldTabBaseColor:Lerp(Themes[self:GetThemeName()], 0.15)
            end
        end
    end

    local baseColor = Color3.fromRGB(65, 65, 65)
    local tabButton = create("TextButton", { Name = tabName, Text = tabName, Size = UDim2.fromOffset(94, 28), BackgroundColor3 = baseColor, Font = Enum.Font.SourceSans, TextColor3 = Color3.fromRGB(225, 225, 225), TextSize = 14, Parent = self.TabContainer })
    tabButton:SetAttribute("BaseColor", baseColor)
    table.insert(self.themeableBackgrounds, {Object = tabButton, BaseColor = baseColor})

    create("UICorner", { CornerRadius = UDim.new(0.5, 0), Parent = tabButton })
    local tabStroke = create("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 2, ApplyStrokeMode = Enum.ApplyStrokeMode.Border, Parent = tabButton })
    local tabGradient = create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0.00, BORDER_COLOR), ColorSequenceKeypoint.new(0.30, BORDER_COLOR),
            ColorSequenceKeypoint.new(0.50, self.CurrentThemeColor),
            ColorSequenceKeypoint.new(0.70, BORDER_COLOR),
            ColorSequenceKeypoint.new(1.00, BORDER_COLOR)
        }),
        Rotation = 0, Parent = tabStroke
    })
    table.insert(self.animatedGradients, tabGradient)

    local contentPage = create("Frame", { Name = tabName .. "_Page", Size = UDim2.new(1, 0, 1, 0), BackgroundTransparency = 1, Parent = self.ContentContainer, Visible = true })
    
    local listLayout = create("UIListLayout", { Parent = contentPage, Padding = UDim.new(0, 8), SortOrder = Enum.SortOrder.LayoutOrder })
    local tabObject = { page = contentPage, window = self }
    setmetatable(tabObject, BlindHubsUiLibrary)

    local function updateCanvasSize()
        self.ContentContainer.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
    end

    listLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateCanvasSize)

    contentPage:GetPropertyChangedSignal("Visible"):Connect(function()
        if contentPage.Visible then
            task.defer(updateCanvasSize)
        end
    end)

    self.activeTab = tabButton
    self.pages[tabButton] = tabObject.page

    for button, page in pairs(self.pages) do
        page.Visible = (button == tabButton)
    end

    task.defer(updateCanvasSize)

    local currentThemeName = self:GetThemeName()
    if currentThemeName ~= "Black" then
        tabButton.BackgroundColor3 = baseColor:Lerp(Themes[currentThemeName], 0.35)
    end

    tabButton.MouseButton1Click:Connect(function()
        if self.activeTab and self.activeTab ~= tabButton then
            local oldTabBaseColor = self.activeTab:GetAttribute("BaseColor")
            local currentThemeName = self:GetThemeName()
            if oldTabBaseColor then
                if currentThemeName == "Black" then
                    self.activeTab.BackgroundColor3 = oldTabBaseColor
                else
                    self.activeTab.BackgroundColor3 = oldTabBaseColor:Lerp(Themes[currentThemeName], 0.15)
                end
            end
        end

        for _, page in pairs(self.pages) do page.Visible = false end
        tabObject.page.Visible = true
        local currentThemeName = self:GetThemeName()
        if currentThemeName ~= "Black" then
            tabButton.BackgroundColor3 = baseColor:Lerp(Themes[currentThemeName], 0.35)
        end
        self.activeTab = tabButton
    end)
    return tabObject
end
