-- ===================================================================
-- CREATE SETTINGS TAB SCRIPT
-- Run this after creating the window to add a settings tab.
-- ===================================================================

-- Find the window created by the previous script
local Window = getgenv().Window

-- Check if the window exists
if not Window then
    warn("CreateSettingsTab Error: The main window was not found. Please run the 'Create Window' script first.")
    return
end

-- Create the "Settings" tab
local settingsTab = Window:AddTab("Settings")

settingsTab:AddLabel("Theme & Appearance")

-- Create a dropdown for changing the theme
local themeNames = {}
-- This part dynamically gets the theme names from your library's "Themes" table
-- Note: This requires the "Themes" table inside your library to be accessible.
-- If you get an error here, you might need to expose it in your library code.
pcall(function()
    for name in pairs(getgenv().BlindHubsUiLibrary.Themes) do
        table.insert(themeNames, name)
    end
    table.sort(themeNames)
end)

if #themeNames > 0 then
    local themeDropdown = settingsTab:AddDropdown({
        Text = "UI Theme",
        Options = themeNames
    })
    themeDropdown.State.Changed:Connect(function(selectedTheme)
        print("Theme changed to:", selectedTheme)
        Window:SetTheme(selectedTheme)
    end)
else
    settingsTab:AddLabel("Could not load themes.")
end


-- Create a slider for changing the UI transparency
local transparencySlider = settingsTab:AddSlider({
    Text = "UI Transparency",
    Min = 0,
    Max = 100,
    Default = 80 -- You can set a default value
})
transparencySlider.State.Changed:Connect(function(newValue)
    print("Transparency set to:", newValue)
    Window:SetTransparency(newValue)
end)

print("Tab 'Settings' was created successfully.")
