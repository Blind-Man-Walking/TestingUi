--- Creates a new, compact single-bar slider.
function BlindHubsUiLibrary:AddSlider(options)
    options = options or {}
    local text = options.Text or "Slider"
    local min = options.Min or 0
    local max = options.Max or 100
    local default = options.Default or min
    local linkedToggle = options.Toggle -- Get the linked toggle from options

    local baseColor = Color3.fromRGB(65, 65, 65)
    local sliderFrame = create("Frame", {
        Name = text .. "_Slider", Size = UDim2.new(1, 0, 0, 30), BackgroundColor3 = baseColor, Parent = self.page
    })
    table.insert(self.window.themeableBackgrounds, {Object = sliderFrame, BaseColor = baseColor})

    create("UICorner", { CornerRadius = UDim.new(0.5, 0), Parent = sliderFrame })
    local sliderStroke = create("UIStroke", { Color = Color3.new(1, 1, 1), Thickness = 2, Parent = sliderFrame })
    local sliderGradient = create("UIGradient", {
        Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0.00, BORDER_COLOR), ColorSequenceKeypoint.new(0.30, BORDER_COLOR),
            ColorSequenceKeypoint.new(0.50, self.window.CurrentThemeColor), ColorSequenceKeypoint.new(0.70, BORDER_COLOR),
            ColorSequenceKeypoint.new(1.00, BORDER_COLOR)
        }),
        Rotation = 0, Parent = sliderStroke
    })
    table.insert(self.window.animatedGradients, sliderGradient)

    local state = create("NumberValue", { Name = "State", Value = default, Parent = sliderFrame })

    local valueLabel = create("TextLabel", {
        Name = "ValueLabel", Position = UDim2.fromOffset(5, 5), Size = UDim2.fromOffset(40, 20), BackgroundTransparency = 1,
        Font = Enum.Font.SourceSansBold, Text = tostring(default), TextColor3 = Color3.fromRGB(225, 225, 225), TextSize = 14,
        TextXAlignment = Enum.TextXAlignment.Center, Parent = sliderFrame
    })

    local sliderLabel = create("TextLabel", {
        Name = "Label", Position = UDim2.new(1, 0, 0.5, 0), AnchorPoint = Vector2.new(1, 0.5), Size = UDim2.new(0, 100, 1, 0),
        BackgroundTransparency = 1, Font = Enum.Font.SourceSans, Text = text, TextColor3 = Color3.fromRGB(225, 225, 225),
        TextSize = 14, TextXAlignment = Enum.TextXAlignment.Center, Parent = sliderFrame
    })

    local track = create("Frame", {
        Name = "Track", Position = UDim2.fromOffset(50, 12), Size = UDim2.new(1, -185, 0, 6),
        AnchorPoint = Vector2.new(0, 0.5), BackgroundColor3 = Color3.fromRGB(45, 45, 45), Parent = sliderFrame
    })
    create("UICorner", { CornerRadius = UDim.new(0.5, 0), Parent = track })
    create("UIStroke", { Color = BORDER_COLOR, Thickness = 1.5, Parent = track })

    local fill = create("Frame", { Name = "Fill", Size = UDim2.new((default - min) / (max - min), 0, 1, 0), BackgroundColor3 = self.window.CurrentThemeColor, Parent = track })
    create("UICorner", { CornerRadius = UDim.new(0.5, 0), Parent = fill })
    table.insert(self.window.staticThemeElements, {Object = fill, Property = "BackgroundColor3"})

    local knob = create("TextButton", { Name = "Knob", Size = UDim2.fromOffset(14, 14), Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0), AnchorPoint = Vector2.new(0.5, 0.5), BackgroundColor3 = Color3.fromRGB(225, 225, 225), Parent = track, ZIndex = 2, Text = "" })
    create("UICorner", { CornerRadius = UDim.new(0.5, 0), Parent = knob })

    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            local inputChangedConnection, inputEndedConnection
            local function updateSlider(inputObject)
                local x = math.clamp(inputObject.Position.X - track.AbsolutePosition.X, 0, track.AbsoluteSize.X)
                local percent = x / track.AbsoluteSize.X
                local value = math.floor((min + (max - min) * percent) + 0.5)
                state.Value = value
            end
            updateSlider(input)
            inputChangedConnection = UserInputService.InputChanged:Connect(function(inputObject)
                if inputObject.UserInputType == Enum.UserInputType.MouseMovement or inputObject.UserInputType == Enum.UserInputType.Touch then
                    updateSlider(inputObject)
                end
            end)
            inputEndedConnection = UserInputService.InputEnded:Connect(function(inputObject)
                if inputObject.UserInputType == Enum.UserInputType.MouseButton1 or inputObject.UserInputType == Enum.UserInputType.Touch then
                    inputChangedConnection:Disconnect()
                    inputEndedConnection:Disconnect()
                end
            end)
        end
    end)

    state.Changed:Connect(function(newValue)
        valueLabel.Text = tostring(newValue)
        local percent = (newValue - min) / (max - min)
        local newPos = UDim2.new(percent, 0, 0.5, 0)
        fill:TweenSize(UDim2.new(percent, 0, 1, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.1, true)
        knob:TweenPosition(newPos, Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.1, true)
    end)
    
    -- ==================== [NEW CODE START] ====================
    -- If a toggle is linked, manage visibility based on its state.
    if linkedToggle and linkedToggle:FindFirstChild("State") then
        local toggleState = linkedToggle:FindFirstChild("State")

        -- Set initial visibility based on the toggle's current state
        sliderFrame.Visible = toggleState.Value

        -- Connect to the toggle's Changed event to update visibility
        toggleState.Changed:Connect(function(newValue)
            sliderFrame.Visible = newValue
        end)
    end
    -- ===================== [NEW CODE END] =====================

    return sliderFrame
end
